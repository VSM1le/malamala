// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createCeoUser = `-- name: CreateCeoUser :one
insert into users (id, create_at,update_at,name,user_name,password,role)
values ($1,$2,$3,$4,$5,$6,$7)
returning id, create_at, update_at, name, user_name, password, role, api_key, parent_user_id
`

type CreateCeoUserParams struct {
	ID       uuid.UUID
	CreateAt time.Time
	UpdateAt time.Time
	Name     string
	UserName string
	Password string
	Role     string
}

func (q *Queries) CreateCeoUser(ctx context.Context, arg CreateCeoUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createCeoUser,
		arg.ID,
		arg.CreateAt,
		arg.UpdateAt,
		arg.Name,
		arg.UserName,
		arg.Password,
		arg.Role,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreateAt,
		&i.UpdateAt,
		&i.Name,
		&i.UserName,
		&i.Password,
		&i.Role,
		&i.ApiKey,
		&i.ParentUserID,
	)
	return i, err
}

const genApiKey = `-- name: GenApiKey :one
update users set api_key = $1 where id = $2
returning id, create_at, update_at, name, user_name, password, role, api_key, parent_user_id
`

type GenApiKeyParams struct {
	ApiKey sql.NullString
	ID     uuid.UUID
}

func (q *Queries) GenApiKey(ctx context.Context, arg GenApiKeyParams) (User, error) {
	row := q.db.QueryRowContext(ctx, genApiKey, arg.ApiKey, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreateAt,
		&i.UpdateAt,
		&i.Name,
		&i.UserName,
		&i.Password,
		&i.Role,
		&i.ApiKey,
		&i.ParentUserID,
	)
	return i, err
}

const getUserByApi = `-- name: GetUserByApi :one
select id, create_at, update_at, name, user_name, password, role, api_key, parent_user_id from users where api_key =$1
`

func (q *Queries) GetUserByApi(ctx context.Context, apiKey sql.NullString) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByApi, apiKey)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreateAt,
		&i.UpdateAt,
		&i.Name,
		&i.UserName,
		&i.Password,
		&i.Role,
		&i.ApiKey,
		&i.ParentUserID,
	)
	return i, err
}

const loginUser = `-- name: LoginUser :one
select id,password from users where user_name = $1
`

type LoginUserRow struct {
	ID       uuid.UUID
	Password string
}

func (q *Queries) LoginUser(ctx context.Context, userName string) (LoginUserRow, error) {
	row := q.db.QueryRowContext(ctx, loginUser, userName)
	var i LoginUserRow
	err := row.Scan(&i.ID, &i.Password)
	return i, err
}

const logoutUser = `-- name: LogoutUser :exec
update users set api_key = null where id = $1 and api_key = $2
returning id, create_at, update_at, name, user_name, password, role, api_key, parent_user_id
`

type LogoutUserParams struct {
	ID     uuid.UUID
	ApiKey sql.NullString
}

func (q *Queries) LogoutUser(ctx context.Context, arg LogoutUserParams) error {
	_, err := q.db.ExecContext(ctx, logoutUser, arg.ID, arg.ApiKey)
	return err
}
